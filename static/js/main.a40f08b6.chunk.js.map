{"version":3,"sources":["constants/todos.js","ducks/todos.js","ducks/view.js","reducers/index.js","constants/view.js","components/Tabs/TabPanel.jsx","components/Tabs/TabHeader.jsx","ducks/todo.js","components/Content/Todo.jsx","components/Content/TodoList.jsx","components/Content/AllTodo.jsx","components/Content/Content.jsx","serviceWorker.js","index.js"],"names":["ADD_TODO","CLEAR_TODO","MASS_ADD","TOGGLE_TODO","todo","state","action","type","id","text","completed","SET_VIEW","combineReducers","todos","undefined","map","t","data","viewMode","filter","TabPanel","children","value","index","other","role","hidden","aria-labelledby","Box","Typography","component","TabHeader","handleChange","AppBar","position","className","Tabs","onChange","aria-label","Tab","label","nextTodoId","hocChain","compose","connect","dispatch","actionToggleTodo","style","textDecoration","Checkbox","checked","selectedTodo","item","key","actionAddTodo","actionClearTodo","actionMassAddTodo","massAdd","useState","input","setInput","Card","CardContent","onSubmit","event","preventDefault","TextField","target","Button","variant","color","onClick","updatedTodos","temp","Object","assign","actionSetView","React","tabValue","setTabValue","Fragment","newValue","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a40f08b6.chunk.js","sourcesContent":["export const ADD_TODO = 'modules/todo-app/ADD_TODO';\nexport const CLEAR_TODO = 'modules/todo-app/CLEAR_TODO';\nexport const MASS_ADD = 'modules/todo-app/MASS_ADD';\nexport const TOGGLE_TODO = 'modules/todo-app/TOGGLE_TODO';","import { ADD_TODO, CLEAR_TODO, MASS_ADD, TOGGLE_TODO } from '../constants/todos';\n\nconst todo = (state, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return {\n                id: action.id,\n                text: action.text,\n                completed: false\n            }\n        case TOGGLE_TODO:\n            if (state.id !== action.id) {\n                return state\n            }\n\n            return {\n                ...state,\n                completed: !state.completed\n            }\n        default:\n            return state\n    }\n}\n  \nexport const todosReducer = (state = [], action) => {\n    switch (action.type) {\n      case ADD_TODO:\n        return [\n          ...state,\n          todo(undefined, action)\n        ]\n      case TOGGLE_TODO:\n        return state.map(t =>\n          todo(t, action)\n        )\n      case CLEAR_TODO:\n        return [];\n      case MASS_ADD:\n        return action.data;   \n      default:\n        return state\n    }\n}  ","import { VIEW_SHOW_ALL } from '../constants/view';\n\nexport const SET_VIEW = 'modules/todo-app/SET_VIEW';\n\nexport const setView = (filter) => ({\n    type: SET_VIEW,\n    filter\n})\n\nexport const viewReducer = (state = VIEW_SHOW_ALL, action = { type: 'NULL_ACTION'}) => {\n    switch (action.type) {\n      case SET_VIEW:\n        return action.filter\n      default:\n        return state\n    }\n}","import { combineReducers } from 'redux';\nimport { todosReducer as todos } from '../ducks/todos';\nimport { viewReducer as viewMode } from '../ducks/view';\n\nexport default combineReducers({\n    todos,\n    viewMode\n})","export const VIEW_SHOW_ALL = 'SHOW_ALL';\nexport const VIEW_SHOW_COMPLETED = 'SHOW_COMPLETED';\nexport const VIEW_SHOW_ACTIVE = 'SHOW_ACTIVE';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n/*\nThis component is responsible for showing tabs content when switched -\n*/\nconst TabPanel = ({\n    children, \n    value, \n    index, \n    ...other\n}) => (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box>\n          <Typography component={'span'}>{children}</Typography>\n        </Box>\n      )}\n    </div>\n);\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nexport default TabPanel;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport '../TodoApp.scss';\n\n/*\nThis component is responsible for showing creating tabs in header panel -\n*/\nconst TabHeader = ({ \n    handleChange, \n    value \n}) => (\n    <AppBar position=\"static\">\n        <div className=\"container-head\">\n            <div className=\"tabs\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"tabs\">\n                    <Tab label=\"All\" id=\"tab-1\" />\n                    <Tab label=\"Active\" id=\"tab-2\" />\n                    <Tab label=\"Completed\" id=\"tab-3\" />\n                </Tabs>\n            </div>\n        </div>    \n    </AppBar>\n)\n\nTabHeader.propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    value: PropTypes.number.isRequired,\n}\n\nexport default TabHeader;","import { ADD_TODO, CLEAR_TODO, MASS_ADD, TOGGLE_TODO } from '../constants/todos';\n\nlet nextTodoId = 0\nexport const addTodo = (text) => ({\n  type: ADD_TODO,\n  id: nextTodoId++,\n  text\n});\n\nexport const clearTodo = () => ({\n  type: CLEAR_TODO\n});\n\nexport const massAdd = data => ({\n  type: MASS_ADD,\n  data\n});\n\nexport const toggleTodo = (id) => ({\n    type: TOGGLE_TODO,\n    id\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { toggleTodo } from '../../ducks/todo';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n/*\nThis component is responsible for viewing todo items -\nactionToggleTodo : being used to update status to complet/incomplete in store\n*/\nconst Todo = ({ \n    actionToggleTodo, \n    id, \n    completed, \n    text \n}) => (\n    <li>\n        <label style={{textDecoration: completed ? 'line-through' : 'none'}}>\n            {text}\n        </label>\n        <Checkbox \n            onChange={() => actionToggleTodo(id)} \n            checked={completed} \n        />\n    </li>\n);\n\nTodo.propTypes = {\n    actionToggleTodo: PropTypes.func.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n}\n\nconst mapDispatchAsProps = dispatch => {\n    return {\n        actionToggleTodo: value => dispatch(toggleTodo(value)),\n    };\n}\n\nconst hocChain = compose(\n    connect(null, mapDispatchAsProps),\n);\n\nexport { Todo as TestableTodo };\n\nexport default hocChain(Todo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Todo from './Todo';\nimport { VIEW_SHOW_ACTIVE, VIEW_SHOW_COMPLETED, VIEW_SHOW_ALL } from '../../constants/view';\n\n/*\nThis component is responsible for iterating and choosing selected todos to view -\n*/\nconst TodoList = ({ \n  todos, \n  viewMode \n}) => {\n  let selectedTodo = [];\n  if(viewMode === VIEW_SHOW_ALL) selectedTodo = todos;\n  if(viewMode === VIEW_SHOW_COMPLETED) selectedTodo = todos.filter(item => item.completed);\n  if(viewMode === VIEW_SHOW_ACTIVE) selectedTodo = todos.filter(item => !item.completed);\n  return (\n    <ul>\n      {selectedTodo.map(({ id, text, completed }) =>\n          <div key={id}>\n            <Todo id={id} completed={completed} text={text} />\n          </div>\n      )}\n    </ul>\n  )\n};\n\nTodoList.propTypes = {\n  viewMode: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n  })).isRequired,\n}\n\nexport const mapStateToProps = state => ({\n  todos: state.todos,\n  viewMode: state.viewMode,\n});\n\nconst hocChain = compose(\n  connect(mapStateToProps),\n);\n\nexport { TodoList as TestableTodoList };\n\nexport default hocChain(TodoList);\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TodoList from './TodoList';\nimport { addTodo, clearTodo, massAdd } from '../../ducks/todo';\n\n/*\nThis component is responsible for rendering actual body content -\ninputChange : being used to get user entered text\nonSubmit/ actionAddTodo : being used to update redux store & clear text area\nmassAction: being used to update all status on single go\nclearAction: being used to clear all todos from store\n*/\nconst AllTodo = ({ \n    actionAddTodo, \n    todos, \n    actionClearTodo, \n    actionMassAddTodo \n}) => {\n    const [input, setInput] = useState(''); \n\n    const inputChange = event => { setInput(event.target.value); }\n\n    const onSubmit = event => {\n        event.preventDefault();\n        actionAddTodo(input);\n        setInput('');\n    }\n\n    const inCompleteAction = () => {\n        const updatedTodos = todos.map(item => {\n            var temp = Object.assign({}, item);\n            temp.completed = false;\n            return temp;\n        });\n        actionClearTodo();\n        actionMassAddTodo(updatedTodos);\n    };\n\n    const completeAction = () => {\n        const updatedTodos = todos.map(item => {\n            var temp = Object.assign({}, item);\n            temp.completed = true;\n            return temp;\n        });\n        actionClearTodo();\n        actionMassAddTodo(updatedTodos);\n    };\n\n    const clearAction = () => {\n        actionClearTodo();\n    };\n\n    return (\n        <div className=\"main-card\">\n            <Card className=\"card-container\">\n                <CardContent className=\"card-content\">\n                    <div className=\"first-section\">\n                        <div className=\"heading-label\">What needs to be done?</div>\n                        <form onSubmit={onSubmit}>\n                            <div className=\"input-text\">\n                                <div>\n                                    <TextField className=\"text-box\" id=\"input\" label=\"Input your TODOs...\" onChange={inputChange} value={input} />\n                                </div>\n                                <span>\n                                    <Button className=\"add-button\" variant=\"contained\" type='submit'>Add</Button>\n                                </span>\n                            </div>\n                        </form>\n                    </div>\n                    <TodoList />\n                </CardContent>\n            </Card>\n            <div className=\"mass-container\">\n                <Button className=\"mass-buttons\" variant=\"contained\" color=\"primary\" onClick={completeAction}>\n                    Mark all as complete\n                </Button>\n                &nbsp;\n                <Button className=\"mass-buttons\" variant=\"contained\" color=\"primary\" onClick= {inCompleteAction}>\n                    Mark all as incomplete\n                </Button>\n                &nbsp;\n                <Button className=\"mass-buttons\" variant=\"contained\" color=\"primary\" onClick= {clearAction}>\n                    Clear all\n                </Button>\n            </div>\n        </div>    \n    )\n};\n\nAllTodo.propTypes = {\n    actionAddTodo: PropTypes.func.isRequired,\n    actionClearTodo: PropTypes.func.isRequired,\n    actionMassAddTodo: PropTypes.func.isRequired,\n    todos: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        completed: PropTypes.bool.isRequired,\n        text: PropTypes.string.isRequired,\n    })).isRequired,\n}\n\nexport const mapStateToProps = state => ({\n    todos: state.todos,\n});\n\nconst mapDispatchAsProps = dispatch => {\n    return {\n        actionAddTodo: value => dispatch(addTodo(value)),\n        actionClearTodo: () => dispatch(clearTodo()),\n        actionMassAddTodo: data => dispatch(massAdd(data)),\n    };\n}\n\nconst hocChain = compose(\n    connect(mapStateToProps, mapDispatchAsProps),\n);\n\nexport { AllTodo as TestableAllTodo };\n\nexport default hocChain(AllTodo);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport '../TodoApp.scss';\nimport TabPanel from '../Tabs/TabPanel';\nimport TabHeader from '../Tabs/TabHeader';\nimport AllTodo from './AllTodo';\nimport { setView } from '../../ducks/view';\nimport { VIEW_SHOW_ACTIVE, VIEW_SHOW_COMPLETED, VIEW_SHOW_ALL } from '../../constants/view'; \n\n/*\nThis component is the entry point & responsible for rendering Tabs and content -\nchangeTab() : being used to switch the view based on Tab chose\nactionSetView() : being used to update redux store\n*/\nconst Content = ({ actionSetView }) => {\n  const [tabValue, setTabValue] = React.useState(0);\n\n  const changeTab = (event, newValue) => {\n    setTabValue(newValue);\n    if(newValue === 0) actionSetView(VIEW_SHOW_ALL);\n    if(newValue === 1) actionSetView(VIEW_SHOW_ACTIVE);\n    if(newValue === 2) actionSetView(VIEW_SHOW_COMPLETED);\n  }\n\n  return (\n    <React.Fragment>\n      <TabHeader value={tabValue} handleChange={changeTab} />\n      <TabPanel value={tabValue} index={0}>\n          <AllTodo />\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n          <AllTodo />\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n          <AllTodo />\n      </TabPanel>\n    </React.Fragment>\n  );\n}\n\nContent.propTypes = {\n  actionSetView: PropTypes.func.isRequired,\n}\n\nconst mapDispatchAsProps = dispatch => {\n  return {\n      actionSetView: (value) => dispatch(setView(value)),\n  };\n}\n\nconst hocChain = compose(\n  connect(null, mapDispatchAsProps),\n);\n\nexport { Content as TestableContent };\n\nexport default hocChain(Content);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport rootReducer from './reducers/index';\nimport Content from './components/Content/Content';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Content />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}